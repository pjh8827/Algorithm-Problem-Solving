#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#define MAX 1001

using namespace std;

int T;
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
int N, M, K;
int map[MAX][MAX];
bool check[MAX][MAX];

vector < pair<int, int>> v;
vector <int> answer;
int max1;
int cnt, cnt2; 

struct cabbage {
	int x;
	int y;
}cabbage1;

queue<cabbage> q;

void bfs() {	
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && nx < M && ny >= 0 && ny < N) {
				if (map[nx][ny] == 1 && check[nx][ny] == 0) {
					q.push({ nx,ny });
					check[nx][ny] = 1;
				}
			}
		}
	}
	return;
}


int main() {

	cin >> T;
	for (int tc = 0; tc < T; tc++) {
		cin >> N >> M >> K; cnt2 = 0; 
		for (int j = 0; j < M; j++) {
			for (int k = 0; k < N; k++) {
				map[j][k] = 0;
				check[j][k] = 0;
			}
		}
		for (int j = 0; j < K; j++) {
			int x;
			int y;
			cin >> y >> x;
			map[x][y] = 1;
			v.push_back({ x,y });
		}

		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if (!check[i][j] && map[i][j]) {
					check[i][j] = 1;
					q.push({ i,j });
					cnt2++;
					bfs();
				}
			}
		}
		cout << cnt2 << '\n';
	}
	return 0;
}